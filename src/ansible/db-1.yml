---
- hosts: all
  become: yes
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull default Docker image
      docker_image:
        name: "{{ default_container_image }}"
        source: pull

    # Creates the number of containers defined by the variable create_containers, using values from vars file
    - name: Create default containers
      docker_container:
        name: "{{ default_container_name }}{{ item }}"
        image: "{{ default_container_image }}"
        command: "{{ default_container_command }}"
        state: present
      with_sequence: count={{ create_containers }}

---
- hosts: dbs
  become: yes
  vars:
    ansible_become_pass: "{{ your_sudo_pass }}"
  vars_files:
    - vars/default.yml

  tasks:
  - name: Update debian
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  
  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  - name: Install Python3 Setup Tools
    apt: name=python3-setuptools state=present

  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest

  - name: Install Docker Module for Python
    pip:
      name: docker

  - name: Pull default Docker image
    docker_image:
      name: "{{ default_container_image }}"
      source: pull

  - name: Install Docker Module for Python to Run Containers from Script
    pip:
        name: docker-compose

  #update cache here again
  - name: Update debian
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

  - name: Show Output of Hello World Example
    debug:
      msg: "Container Output: {{hello_world_output.stdout}}"
                    
  - name: Check Container Status
    command: docker ps
    register: res
  - debug: var=res.stdout
    
  - name: Copy Needed Files from Ansible Machine Machine to Remote hosts
    copy:
      src:  /home/user/.ansible/dbs/{{item}}
      dest: /home/
      with_items:
        - docker-compose.yml 
        - init.sql 
        
  - name: Go to Directory Where Files Have Been Placed and Create PostgREST Docker DB Server and DB Containers
    command: chdir=/home/ docker-compose up -d

  - name: Clean Artifact Path
    ansible.builtin.file:
      path: /home/{{item}}
      state: absent
      with_items:
        - docker-compose.yml
        - init.sql